// SN74ALS166 parallel-load 8-bit shift regiter
// Daniel Alonso and Eduardo Alonso

module SN74ALS166 (Qh, A, B, C, D, E, F, G, H, Serial, clk, clk_INH, clr, sh_ld);
	output logic Qh;//1 bit serial output
	input logic A, B, C, D, E, F, G, H, Serial, clk, clk_INH, clr, sh_ld;//inputs from testbench
  	logic D1, D2, D3, D4, D5, D6, D7;//flipflops to hold data
  
always_ff @ (posedge clk or negedge clr) 
begin    
   	if(!clr) 
    begin//Sets everything to 0 when clr is low
   		D1 = 0;
        D2 = 0;
        D3 = 0;
        D4 = 0;
        D5 = 0;
        D6 = 0;
        D7 = 0;
      	Qh = 0;
    end
    else if(sh_ld == 0 && clk_INH == 0 && clr == 1) 
    begin//Loads data when sh_ld is low 
          D1 = A;
          D2 = B;
          D3 = C;
          D4 = D;
          D5 = E;
          D6 = F;
          D7 = G;
          Qh = H;
    end
    else if(sh_ld == 1 && clk_INH == 0 && Serial == 1 && clr == 1) 
    begin//Starts serial data at first flipflop
    	D1 = Serial;
    end
    else if(sh_ld == 1 && clk_INH == 0 && clr == 1) 
    begin//Shifts data when sh_ld is high	 
         Qh <= D7;
         D7 <= D6;
         D6 <= D5;
         D5 <= D4;
         D4 <= D3;
         D3 <= D2;
         D2 <= D1;
         D1 <= 0;
	end
  
end
  
  

endmodule
